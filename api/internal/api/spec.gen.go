// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xV3W4bRRR+ldWBC5BWXtMUKu0dRY4bUYmIukIRiqqxc7zest6ZzoydrCpLSYqEuELi",
	"Bu54hY1bk9CQzSuceSM0s2vHfwXL4WY1Ojsz55zv++Y7r6HD+4KnmGoF4WuQ+GqASj/mRzG6wFcSmcan",
	"POLflr9ssMNTjalbMiGSuMN0zNPgpeKpjalOD/vMroTkAqWu7urGCaasj3Z9hKojY2HPQQj0O/1tfvHM",
	"j5TTX3RNuUfXVNBbKsw5XdEt5eADnrC+SBBCSHjEX2g80eCDzoQNKS3jNIKR736uzXBJBV2YU8rpT5rQ",
	"DV3RxKOx90mbKfzi4acLGeLooJ2prsza2cHjTGKUZSijAcpms9VoNVuN3gCHUTZEedw8aLZ2W7uNvedP",
	"dr9rNJ8cNAY9zLq9Y+xF3eNHMho+isCHLpd9piGEdqZxte7RLMLbL7GjYTSysWevBkzi/aE/sZ9Zew9m",
	"yeJUY4TyA/lHPkhUgqdqVQxz4S1rGshkoSroaS3CIFA7tYR3WNLjSperwHJaE2m0GW7+Mve/UU635pQK",
	"c+bRjVXXJeX01pyaN3RJ782bVbnNYX//TpW76cUiCQ83I2GbZsZ0Re9oQoVH7+l62tHIrwp0NTWk5HK1",
	"VJyG72h5hnKI0mucaJQpS7zy5AZM+LBv/6zCoZkeqMUk/IdNuY3TrnvfOtbuZAuV9r7c3wMfhihVidJn",
	"tbrNzwWmTMQQwk6tXquDD4LpnksdTH1C8PJl2QodnXtHEMI+V9oKHfw5T8zsvo8ldiGEj4I75wwWbDNY",
	"9czlh/SgXv/wVdW+YN1rcyQO+n0ms6kWZsxT/h8GqlmkIPwenouEsyPP3nznfof26kBUhEW4BpMmakfo",
	"+mY2fhvruq6EGeyXxK+o/puvLYaf/4+ZShWvSbWXVjqf6r7auAD8H/YB0pgm5rQE3o6VC4d2Yc7o1n0L",
	"uqAbu7IceObM7S7P5LU5PhzoJf6lU/y7LEtf2kaYi9NkK1Eum+ISLr9SQZc0th2anymniTm3HjSmnN65",
	"4LlnfqIrc2Y1OgdB1feh40M54G18eYo/nc4F8MvxMZ0Zs4ER7tTrdRgdjv4JAAD//8CtAL/aCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
